group srogen;

//--prompts--------------------------------------------------
genclass(package,sroName,className,baseClassName,promptL,slotName,grammarL,baseIsSROBaseQuestion) ::= <<
//THIS CLASS HAS BEEN AUTOMATICALLY GENERATED BY SROGEN. DO NOT MODIFY BY HAND

/**
* Copyright (c) 2007 Ian Rae
* All Rights Reserved.
* Licensed under the Eclipse Public License - v 1.0
* For more information see http://www.eclipse.org/legal/epl-v10.html
*/
package $package$;
import org.speakright.core.*;
import org.speakright.core.render.*;
import org.speakright.sro.BaseSROQuestion;
import java.io.Serializable;

@SuppressWarnings("serial")
public class $className$ extends $baseClassName$ {
	
	/* prompts */
$promptL:pdeclare(); separator="\n"$

	/* sub-prompts */
$promptL:psubdeclare(); separator="\n"$

	/* grammars */
$grammarL:gdeclare(); separator="\n"$
	
	/* constructor */
	public $className$($if(baseIsSROBaseQuestion)$String subject$endif$)
	{
		$if(baseIsSROBaseQuestion)$
		super(subject);
		$endif$
		$promptL:pinit(); separator="\n"$
		$promptL:psubinit(); separator="\n"$
		
		$if(slotName)$
		m_slotName = "$slotName$";
		$endif$
	}
	
	$if(baseIsSROBaseQuestion)$
	@Override
	protected void initSubPrompts(Question quest)
	{
		$promptL:pinitSubPrompt(); separator="\n"$
	}
	$endif$
	
	@Override
	public void execute(IExecutionContext context) 
	{
		context.registerPromptFile("\$sro\$\\\\" + "$sroName$_prompts.xml");
		
		super.execute(context);
	}
}
>>

//-----------------------
pdeclare() ::= <<
$if(it.declare)$
	protected String m_$it.name$Prompt;
	public void set_$it.name$Prompt(String text)
	{
		m_$it.name$Prompt = text;
	}
$endif$	
>>

pinit() ::= <<
$if(it.isSubPrompt)$$else$
m_$it.name$Prompt = "id:$it.name$"; 
$endif$	
>>

//-----------------------
psubdeclare() ::= <<
$if(it.isSubPrompt)$
	protected Prompt m_$it.name$SubPrompt;
	public void set_$it.name$Prompt(String text)
	{
		m_$it.name$SubPrompt.setPText(text);
	}
$endif$	
>>

psubinit() ::= <<
$if(it.isSubPrompt)$
m_$it.name$SubPrompt = new Prompt(PromptType.$it.promptType$, "id:$it.name$", $it.subIndex$); 
setPromptCondition(m_$it.name$SubPrompt, "$it.condition$");
$endif$	
>>

pinitSubPrompt() ::= <<
$if(it.isSubPrompt)$
if (m_$it.name$SubPrompt == null) return; //skip if we're being called from baseSROQuestion ctor
quest.addPrompt(m_$it.name$SubPrompt);
$endif$	
>>

//-----------------------
gdeclare() ::= <<
	protected Grammar m_$it.name$Grammar = new Grammar("$it.src$", "$it.slotName$");
	public void set_$it.name$Grammar(Grammar gram)
	{
		m_$it.name$Grammar = gram;
	}
>>



//============================================
genxml(sroName,promptL) ::= <<
<?xml version="1.0" encoding="UTF-8"?>
<!--
THIS CLASS HAS BEEN AUTOMATICALLY GENERATED BY SROGEN. DO NOT MODIFY BY HAND
* Copyright (c) 2007 Ian Rae
* All Rights Reserved.
* Licensed under the Eclipse Public License - v 1.0
* For more information see http://www.eclipse.org/legal/epl-v10.html
-->
<prompts>
$promptL:pxml(); separator="\r\n"$
</prompts>
>>

pxml() ::= <<
 <prompt id="$it.name$">$it.text$</prompt>
>>
