//THIS CLASS HAS BEEN AUTOMATICALLY GENERATED BY SROGEN. DO NOT MODIFY BY HAND

/**
* Copyright (c) 2007 Ian Rae
* All Rights Reserved.
* Licensed under the Eclipse Public License - v 1.0
* For more information see http://www.eclipse.org/legal/epl-v10.html
*/
package org.speakright.sro.gen;
import org.speakright.core.*;
import org.speakright.core.render.*;
import org.speakright.sro.BaseSROQuestion;
import java.io.Serializable;

@SuppressWarnings("serial")
public class genSROListNavigator extends BaseSROQuestion {
	
	/* prompts */
	
	
	
	protected String m_emptyListPrompt;
	public void set_emptyListPrompt(String text)
	{
		m_emptyListPrompt = text;
	}	
	protected String m_outOfRangePrompt;
	public void set_outOfRangePrompt(String text)
	{
		m_outOfRangePrompt = text;
	}	
	protected String m_cantGoNextPrompt;
	public void set_cantGoNextPrompt(String text)
	{
		m_cantGoNextPrompt = text;
	}	
	protected String m_cantGoPreviousPrompt;
	public void set_cantGoPreviousPrompt(String text)
	{
		m_cantGoPreviousPrompt = text;
	}	
	protected String m_sayCurrentItemPrompt;
	public void set_sayCurrentItemPrompt(String text)
	{
		m_sayCurrentItemPrompt = text;
	}	

	/* sub-prompts */
	
	protected Prompt m_numberOfItemsInListSubPrompt;
	public void set_numberOfItemsInListPrompt(String text)
	{
		m_numberOfItemsInListSubPrompt.setPText(text);
	}	
	protected Prompt m_numberOfItemsInListSingularSubPrompt;
	public void set_numberOfItemsInListSingularPrompt(String text)
	{
		m_numberOfItemsInListSingularSubPrompt.setPText(text);
	}	
	
	
	
	
	

	/* grammars */
	protected Grammar m_navigateGrammar = new Grammar("inline:next previous first last repeat", "num");
	public void set_navigateGrammar(Grammar gram)
	{
		m_navigateGrammar = gram;
	}
	
	/* constructor */
	public genSROListNavigator(String subject)
	{
		super(subject);
		m_main1Prompt = "id:main1"; 	
			
			
		m_emptyListPrompt = "id:emptyList"; 	
		m_outOfRangePrompt = "id:outOfRange"; 	
		m_cantGoNextPrompt = "id:cantGoNext"; 	
		m_cantGoPreviousPrompt = "id:cantGoPrevious"; 	
		m_sayCurrentItemPrompt = "id:sayCurrentItem"; 	
			
		m_numberOfItemsInListSubPrompt = new Prompt(PromptType.MAIN1, "id:numberOfItemsInList", -2); 
		setPromptCondition(m_numberOfItemsInListSubPrompt, "play-once");	
		m_numberOfItemsInListSingularSubPrompt = new Prompt(PromptType.MAIN1, "id:numberOfItemsInListSingular", -1); 
		setPromptCondition(m_numberOfItemsInListSingularSubPrompt, "play-once");	
			
			
			
			
			
		
		m_slotName = "num";
	}
	
	@Override
	protected void initSubPrompts(Question quest)
	{
			
		if (m_numberOfItemsInListSubPrompt == null) return; //skip if we're being called from baseSROQuestion ctor
		quest.addPrompt(m_numberOfItemsInListSubPrompt);	
		if (m_numberOfItemsInListSingularSubPrompt == null) return; //skip if we're being called from baseSROQuestion ctor
		quest.addPrompt(m_numberOfItemsInListSingularSubPrompt);	
			
			
			
			
			
	}
	
	@Override
	public void execute(IExecutionContext context) 
	{
		context.registerPromptFile("$sro$\\" + "SROListNavigator_prompts.xml");
		
		super.execute(context);
	}
}